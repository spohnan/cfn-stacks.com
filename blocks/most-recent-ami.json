{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AMI: Daily updates to a CF template with current AMI IDs",
  "Parameters": {
    "filter": {
      "Description": "AMI filter criteria",
      "Type": "String",
      "Default": "{'Name':'owner-alias','Values':['amazon'],'Name':'root-device-type','Values':'ebs','Name':'virtualization-type','Values':'hvm','Name':'name','Values':['amzn-ami-hvm-*.x86_64-gp2']}"
    },
    "regions": {
      "Description": "AWS Regions to search for matching AMIs",
      "Type": "String",
      "Default": "['us-east-1','us-west-1','us-west-2','eu-west-1','eu-central-1','ap-southeast-1','ap-northeast-1','ap-southeast-2','ap-northeast-2','ap-south-1','sa-east-1']"
    },
    "templatename": {
      "Description": "Name of the CF template file stored in the S3 bucket",
      "Type": "String",
      "Default": "aws-linux-ami.json"
    },
    "bucketname": {
      "Description": "S3 Bucket to which the CloudFormation template will be written",
      "Type": "String"
    },
    "bucketregion": {
      "Description": "S3 Bucket region",
      "Type": "String",
      "Default": "us-east-1"
    }
  },
  "Resources": {
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": { "Ref": "bucketname" }
      },
      "DeletionPolicy" : "Retain"
    },
    "BucketPolicy": {
      "Type" : "AWS::S3::BucketPolicy",
      "Properties" : {
        "Bucket" : { "Ref": "bucketname" },
        "PolicyDocument" : {
          "Version":"2012-10-17",
          "Statement":[
            {
              "Sid":"AddPerm",
              "Effect":"Allow",
              "Principal": "*",
              "Action":["s3:GetObject"],
              "Resource":[ { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "bucketname" } , "/*" ]]} ]
            }
          ]
        }
      }
    },
    "DescribeImagesRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": [ "lambda.amazonaws.com" ] },
            "Action": [ "sts:AssumeRole" ]
          }]
        },
        "Path": "/"
      }
    },
    "DescribeImagesPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "svc-describe-images",
        "Roles": [{ "Ref": "DescribeImagesRole" }],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Action": [
              "ec2:DescribeImages",
              "s3:*"
            ],
            "Resource": ["*"]
          }]
        }
      }
    },
    "LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "recent-ami-list",
        "Description": "A CloudFormation template containing the most recent AMIs",
        "Timeout": 180,
        "Handler": "index.handler",
        "Runtime": "python2.7",
        "Role": {"Fn::GetAtt": ["DescribeImagesRole", "Arn" ]},
        "Code": {
          "ZipFile": { "Fn::Join": [ "\n", [
            "import boto3, json",
            "from operator import attrgetter",
            "def handler(event, context):",
            { "Fn::Join": [ "", [ "  data = { 'AWSTemplateFormatVersion': '2010-09-09', 'Description': \"", { "Ref": "filter" }, "\""]]},
            "  mappings = data['Mappings'] = {}",
            "  rtoa = mappings['AwsRegionToAMI'] = {}",
            { "Fn::Join": [ "", [ "  filter =", { "Ref": "filter" }]]},
            { "Fn::Join": [ "", [ "  for region in ", { "Ref": "regions" }, ":" ]]},
            "    ec2 = boto3.resource('ec2', region_name=region)",
            "    rtoa[region] = { 'id': sorted(ec2.images.filter(Filters=[filter]), key=attrgetter('creation_date'), reverse=True)[0].id }",
            "  data['Resources'] = { 'placeholder': { 'Type': 'AWS::S3::Bucket' } }",
            "  data['Outputs'] = { 'ami': { 'Description': 'AMI ID', 'Value': { 'Fn::FindInMap': ['AwsRegionToAMI', { 'Ref': 'AWS::Region' }, 'id']  } } }",
            { "Fn::Join": [ "", [ "  boto3.resource('s3', '", { "Ref": "bucketregion" }, "').Bucket('", { "Ref": "bucketname" } ,"').put_object(Key='", { "Ref": "templatename" } ,"', Body=json.dumps(data, indent=4))" ]]}
          ]]}
        }
      }
    },
    "ScheduledRule": {
      "Type": "AWS::Events::Rule",
      "DependsOn": [ "LambdaFunction" ],
      "Properties": {
        "Description": "ScheduledRule",
        "ScheduleExpression": "rate(1 day)",
        "State": "ENABLED",
        "Targets": [{
          "Arn": { "Fn::GetAtt": ["LambdaFunction", "Arn"] },
          "Id": "TargetFunctionV1"
        }]
      }
    },
    "PermissionForEventsToInvokeLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": { "Ref": "LambdaFunction" },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": ["ScheduledRule", "Arn"] }
      }
    }
  }
}
