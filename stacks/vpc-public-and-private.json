{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "VPC: Two subnets in two availability zones",
  "Parameters": {
    "ClassB": {
      "Description": "Class B of VPC (10.XXX.0.0/16)",
      "Type": "Number",
      "MinValue": 0,
      "MaxValue": 255
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {"Fn::Join": ["", ["10.", {"Ref": "ClassB"}, ".0.0/16"]]},
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "InstanceTenancy": "default",
        "Tags": [{
          "Key": "Name",
          "Value": {"Fn::Join": ["", ["10.", {"Ref": "ClassB"}, ".0.0/16"]]}
        }]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [{
          "Key": "Name",
          "Value": {"Fn::Join": ["", ["10.", {"Ref": "ClassB"}, ".0.0/16"]]}
        }]
      }
    },
    "VPCGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "InternetGatewayId": {"Ref": "InternetGateway"}
      }
    },
    "SubnetAPublic": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {"Fn::Select": ["0", {"Fn::GetAZs": ""}]},
        "CidrBlock": {"Fn::Join": ["", ["10.", {"Ref": "ClassB"}, ".0.0/20"]]},
        "MapPublicIpOnLaunch": true,
        "VpcId": {"Ref": "VPC"},
        "Tags": [{
          "Key": "Name",
          "Value": "A public"
        }]
      }
    },
    "SubnetAPrivate": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {"Fn::Select": ["0", {"Fn::GetAZs": ""}]},
        "CidrBlock": {"Fn::Join": ["", ["10.", {"Ref": "ClassB"}, ".16.0/20"]]},
        "VpcId": {"Ref": "VPC"},
        "Tags": [{
          "Key": "Name",
          "Value": "A private"
        }]
      }
    },
    "SubnetBPublic": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {"Fn::Select": ["1", {"Fn::GetAZs": ""}]},
        "CidrBlock": {"Fn::Join": ["", ["10.", {"Ref": "ClassB"}, ".32.0/20"]]},
        "MapPublicIpOnLaunch": true,
        "VpcId": {"Ref": "VPC"},
        "Tags": [{
          "Key": "Name",
          "Value": "B public"
        }]
      }
    },
    "SubnetBPrivate": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {"Fn::Select": ["1", {"Fn::GetAZs": ""}]},
        "CidrBlock": {"Fn::Join": ["", ["10.", {"Ref": "ClassB"}, ".48.0/20"]]},
        "VpcId": {"Ref": "VPC"},
        "Tags": [{
          "Key": "Name",
          "Value": "B private"
        }]
      }
    },
    "RouteTablePublic": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [{
          "Key": "Name",
          "Value": "Public"
        }]
      }
    },
    "RouteTablePrivate": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [{
          "Key": "Name",
          "Value": "Private"
        }]
      }
    },
    "RouteTableAssociationAPublic": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "SubnetAPublic"},
        "RouteTableId": {"Ref": "RouteTablePublic"}
      }
    },
    "RouteTableAssociationAPrivate": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "SubnetAPrivate"},
        "RouteTableId": {"Ref": "RouteTablePrivate"}
      }
    },
    "RouteTableAssociationBPublic": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "SubnetBPublic"},
        "RouteTableId": {"Ref": "RouteTablePublic"}
      }
    },
    "RouteTableAssociationBPrivate": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "SubnetBPrivate"},
        "RouteTableId": {"Ref": "RouteTablePrivate"}
      }
    },
    "RouteTablePublicInternetRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "VPCGatewayAttachment",
      "Properties": {
        "RouteTableId": {"Ref": "RouteTablePublic"},
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {"Ref": "InternetGateway"}
      }
    },
    "NetworkAclPublic": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [{
          "Key": "Name",
          "Value": "Public"
        }]
      }
    },
    "NetworkAclPrivate": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "Tags": [{
          "Key": "Name",
          "Value": "Private"
        }]
      }
    },
    "SubnetNetworkAclAssociationAPublic": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {"Ref": "SubnetAPublic"},
        "NetworkAclId": {"Ref": "NetworkAclPublic"}
      }
    },
    "SubnetNetworkAclAssociationAPrivate": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {"Ref": "SubnetAPrivate"},
        "NetworkAclId": {"Ref": "NetworkAclPrivate"}
      }
    },
    "SubnetNetworkAclAssociationBPublic": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {"Ref": "SubnetBPublic"},
        "NetworkAclId": {"Ref": "NetworkAclPublic"}
      }
    },
    "SubnetNetworkAclAssociationBPrivate": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {"Ref": "SubnetBPrivate"},
        "NetworkAclId": {"Ref": "NetworkAclPrivate"}
      }
    },
    "NetworkAclEntryInPublicAllowAll": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPublic"},
        "RuleNumber": "99",
        "Protocol": "-1",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "NetworkAclEntryOutPublicAllowAll": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPublic"},
        "RuleNumber": "99",
        "Protocol": "-1",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "NetworkAclEntryInPrivateAllowVPC": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPrivate"},
        "RuleNumber": "99",
        "Protocol": "-1",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "NetworkAclEntryOutPrivateAllowVPC": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPrivate"},
        "RuleNumber": "99",
        "Protocol": "-1",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "S3Endpoint" : {
      "Type" : "AWS::EC2::VPCEndpoint",
      "Properties" : {
        "PolicyDocument" : {
          "Version":"2012-10-17",
          "Statement":[{
            "Effect":"Allow",
            "Principal": "*",
            "Action": "*",
            "Resource": "*"
          }]
        },
        "RouteTableIds" : [
          {"Ref" : "RouteTablePublic"},
          {"Ref" : "RouteTablePrivate"}
        ],
        "ServiceName" : { "Fn::Join": [ "", [ "com.amazonaws.", { "Ref": "AWS::Region" }, ".s3" ] ] },
        "VpcId" : {"Ref" : "VPC"}
      }
    }
  },
  "Outputs": {
    "VpcId": {
      "Description": "VPC Id",
      "Value": {"Ref": "VPC"}
    },
    "SubnetAPublic": {
      "Description": "Subnet A public.",
      "Value": {"Ref": "SubnetAPublic"}
    },
    "SubnetAPrivate": {
      "Description": "Subnet A private.",
      "Value": {"Ref": "SubnetAPrivate"}
    },
    "SubnetBPublic": {
      "Description": "Subnet B public.",
      "Value": {"Ref": "SubnetBPublic"}
    },
    "SubnetBPrivate": {
      "Description": "Subnet B private.",
      "Value": {"Ref": "SubnetBPrivate"}
    },
    "RouteTablePrivate": {
      "Description": "Route table private.",
      "Value": {"Ref": "RouteTablePrivate"}
    },
    "RouteTablePublic": {
      "Description": "Route table public.",
      "Value": {"Ref": "RouteTablePublic"}
    }
  }
}
